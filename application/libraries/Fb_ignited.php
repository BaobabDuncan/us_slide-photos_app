<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Fb_ignited
{
	/**
	 * Facebook Ignited! 
	 *
	 * Do Not Edit This File, Could Cause Disruption of App 
	 */
	public function __construct($params)
	{
		/**
		 * This grabs the variables from you config/fb_ignited.php file and 
		 * stores them in the globals variable, while passing the below three
		 * to the Facebook SDK when it is called. The instance of CodeIgniter is 
		 * set to $this->CI in order to allow usage from the whole class.
		 */
		
		$fb_params = $this->fb_set_globals($params);
		$this->CI =& get_instance();
		$this->CI->load->library('facebook', $fb_params);
	}
	
	function __call($method, $params)
	{
		/**
		 * This method is used to make sure that if the method being called from the
		 * class is not present it will then look into the Facebook SDK, check if it exists.
		 * If it does not then it returns a false which the user can use to determine what to do.
		 */
		$this->CI->load->helper('params');
		if (method_exists($this->CI->facebook, $method))
		{
			return wrap_call_user_func_array($this->CI->facebook, $method, $params);
		}
		else 
		{
			return false;
		}		
	}
	
	function fb_accept_requests($request_ids, $callback = false)
	{
		/**
		 * This function will handle all your friend requests.
		 * ---
		 * The $callback variable is a holding place for the call of an external model and function.
		 * 
		 * Usage: $callback = array('file'=>'fb_requests_mode','method'=>'database_insert');
		 * 
		 * file		this is the file that will be called as if you were to use $this->load->model('file');
		 * method	this is the function that will called, eg $this->file->method();
		 * 
		 * After the system calls the function it will pass $request_ids to it. Make sure you accept and do with it as 
		 * you will.
		 */
		$session = $this->CI->facebook->getSession();
		$request_ids = explode(',',$request_ids);
		$result_value = false;
		if ($callback)
		{
			extract($callback, EXTR_OVERWRITE);
			if ($this->CI->load->model($file))
			{
				$this->CI->$file->$method($request_ids);
			}	
		}
		foreach ($request_ids as $value)
		{
			$request_data = $this->CI->facebook->api('/'.$value);
			if ($request_data['from'])
			{
				$url = "http://graph.facebook.com/".$request."?access_token=".$session['access_token'];
				$ch = curl_init("https://graph.facebook.com/" . $request . "?access_token=".$session['access_token'].""); 
				curl_setopt($ch, CURLOPT_VERBOSE, 1); 
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
				curl_setopt($ch, CURLOPT_HEADER, 0); 
				curl_setopt($ch, CURLOPT_TIMEOUT, 120);
				curl_setopt($ch, CURLOPT_POST, 1);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $query); 
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
				curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);  
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
				curl_setopt($ch, CURLOPT_CAINFO, NULL); 
				curl_setopt($ch, CURLOPT_CAPATH, NULL); 
				curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0); 
				
				$result = curl_exec($ch); 
				if ($result)
				{
					if (strlen($result_value) > 0) { $result_value .= ", "; } 
					$result_value .= $request_data['from']['name'];
				}
			}
		}
		return $result_value;	
	}
	
	function fb_auth_url($script=false)
	{
		/**
		 * This method creates a authentication url that your users 
		 * can be redirected towards. If the $script variable is set to true
		 * we also include the javascript to redirect them to the location.
		 */
		$url = 'http://www.facebook.com/dialog/oauth/?client_id='.$this->globals['fb_appid'].'&redirect_uri='.urlencode($this->globals['fb_canvas']).'&response_type=token&scope='.$this->globals['fb_auth'];
		if ($script == true) { $url = "<script>top.location.href='".$url."'</script>"; }
		return $url;
	}	
	
	function fb_get_app()
	{
		/** 
		 * If needed we return all of the global configurations.
		 */
		return $this->globals;
	}
	
	function fb_get_auth_scope()
	{
		/**
		 * Returns the default scope for authentication from the fb_ignited 
		 * config file.
		 */
		return $this->globals['fb_auth'];
	}
	
	function fb_get_me()
	{
		/**
		 * This returns all of the information for the user from facebook, 
		 * if it can't recieve anything its due to no authorization so refer them 
		 * to it.
		 */
		$user = $this->CI->facebook->getUser();
		if ($user)
		{
			try {
				$me = $this->CI->facebook->api('/me');
			} catch (FacebookApiException $e) {
				echo $this->fb_auth_url(true);
				exit;
			}
			return $me;
		}
		else
		{
			echo $this->fb_login_url(true);
			exit;
		}	
	}
	
	function fb_get_friends_list()
	{		
		$friends_list = $this->CI->facebook->api('/me/friends');
		if (count($friends_list['data'])==0){
			return false;
		}
		else return $friends_list;
	}
	
	function test()
	{
		//echo $this->getAccessToken();
		//$friends_list = $this->CI->facebook->api('/100000501176253/feed','post', array('message'=> 'tddtdd', 'cb' => ''));
	}
	
	function sendLike($target_id)
	{		
		$this->CI->facebook->api('/126741320741240/likes','post', array('cb' => ''));
	}
	
	function sendComment($target_id)
	{	
		$this->CI->facebook->api('/126741320741240/comments','post', array('message'=> 'test http://www.facebook.com/profile.php?id=100000501176253','cb' => ''));
	}
	
	function sendFeedAboutFavorite($targetName,$photo_id)
	{
		$this->CI->facebook->api('/me/feed','post', 
		array(
		'message'=>"You just made ".$targetName."'s photo favorite",		
		'link'=>"http://www.facebook.com/photo.php?fbid=".$photo_id,
		'name'=>"Click here to see ".$targetName."'s photo",			
		'cb' => 'cb')
		);
	}
	
	function sendMeFeedAboutFavorite($meName,$target,$owner_id)
	{
		try{
			$this->CI->facebook->api('/'.$target.'/feed','post', array('message'=> $meName."'s just made your photo favorite", 'link'=> "http://www.facebook.com/profile.php?id='.$owner_id.'", 'cb' => ''));
		}
		catch(Exception $e){
			return Null;
		}
	}
	function sendTargetFeedAboutFavorite($targetName,$target_id)
	{		
		try{
			$this->CI->facebook->api('/me/feed','post', array('message'=> "You just made ".$targetName."'s photo favorite", 'link'=> "http://www.facebook.com/profile.php?id='.$target_id.'", 'cb' => ''));
		}
		catch(Exception $e){
			return Null;
		}
	}	
	function fb_get_friends_photos($user_id){
		//'query' => 'SELECT object_id,owner,caption,src,src_big FROM photo WHERE aid IN ( SELECT aid FROM album WHERE owner IN ('.$user_id.') ) ORDER BY created DESC LIMIT 100',
		$params = array(
		  'method' => 'fql.query',
		  'query' => 'SELECT object_id,owner,caption,src,link,src_big,created FROM photo WHERE aid IN ( SELECT aid FROM album WHERE owner IN ('.$user_id.') ) ORDER BY created DESC LIMIT 180',
		);

		$result = $this->CI->facebook->api($params);

		return $result;
	}
	
	function fb_get_friend_albums($friend_id)
	{
		$friend_albums = $this->CI->facebook->api('/'.$friend_id.'/albums');
		return $friend_albums;
	}
	
	function fb_get_photo($photo_id)
	{
		$photo = $this->CI->facebook->api('/'.$photo_id);
		return $photo;
	}
	
	function fb_get_canvas()
	{
		/**
		 * This method returns the canvas address you declared in 
		 * config/fb_ignited.php. It is used if you ever need to have the 
		 * canvas on hand outside of the class.
		 */
		return $this->globals['fb_canvas'];
	}
	
	function fb_login_url($script=false)
	{
		/**
		 * This method creates a login url that your users 
		 * can be redirected towards. If the $script variable is set to true
		 * we also include the javascript to redirect them to the location.
		 */
		$url = $this->CI->facebook->getLoginUrl();
		if ($script == true) { $url = "<script>top.location.href='".$url."'</script>"; }
		return $url;
	}
	
	function fb_set_globals($params)
	{
		/**
		 * This function is designed to run the parameters through a security check
		 * as well as set globals and return an array for the Facebook SDK to use.
		 */
		if (is_numeric($params['fb_appid']))
		{
			$param_array['appId'] = $this->globals['fb_appid'] = $params['fb_appid'];			
		}
		if (ctype_alnum($params['fb_secret']))
		{
			$param_array['secret'] = $this->globals['fb_secret'] = $params['fb_secret'];
		}
		if (isset($_SERVER['HTTPS'])):$protocol="https";else:$protocol="http";endif;
		$param_array['cookie'] = $this->globals['fb_cookie'] = $params['fb_cookie'];
		$this->globals['fb_auth'] = $params['fb_auth'];
		$this->globals['fb_canvas'] = $protocol."://apps.facebook.com/".$params['fb_canvas']."/";
		return $param_array;
	}
}